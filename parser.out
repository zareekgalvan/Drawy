Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    CTESTRING
    DRAWARC
    ADDAT
    SCALEUP
    MOVEFIGURE
    BLACK
    SCALEDOWN
    DRAWRECTANGLE
    APPEND
    BLUE
    DRAWCIRCLE
    DRAWLINE
    ROTATEFIGURE
    DRAWSQUARE
    ERASE
    RED
    ORANGE
    THICK
    THIN
    MEDIUM
    REMOVEFIRST
    CHANGECOLOR
    YELLOW
    PREPEND
    CHANGETHICKNESS
    REMOVELAST
    PURPLE
    REMOVEAT
    GREEN
    MOD

Grammar

Rule 0     S' -> program
Rule 1     program -> more_vars more_func main
Rule 2     vars -> var_type to_actual_type ID to_var_table SEMICOLON vars
Rule 3     vars -> <empty>
Rule 4     to_actual_type -> <empty>
Rule 5     to_var_table -> <empty>
Rule 6     more_vars -> vars
Rule 7     more_vars -> <empty>
Rule 8     var_type -> INT
Rule 9     var_type -> DOUBLE
Rule 10    var_type -> BOOL
Rule 11    var_type -> INTLIST
Rule 12    var_type -> DOUBLELIST
Rule 13    func -> FUNC func_type ID procedure_name LPAR pars RPAR func_block more_func
Rule 14    func_type -> INT
Rule 15    func_type -> DOUBLE
Rule 16    func_type -> BOOL
Rule 17    func_type -> VOID
Rule 18    procedure_name -> <empty>
Rule 19    pars -> pars_comp
Rule 20    pars -> <empty>
Rule 21    pars_comp -> var_type add_to_param_type ID to_var_table more_pars
Rule 22    add_to_param_type -> <empty>
Rule 23    more_pars -> COMMA pars_comp
Rule 24    more_pars -> <empty>
Rule 25    func_block -> LBRACKET more_vars more_statements RETURN var_cte SEMICOLON RBRACKET
Rule 26    func_block -> <empty>
Rule 27    more_func -> func
Rule 28    more_func -> <empty>
Rule 29    more_statements -> statement
Rule 30    more_statements -> <empty>
Rule 31    statement -> statement_comp more_statements
Rule 32    statement_comp -> assignation
Rule 33    statement_comp -> condition
Rule 34    statement_comp -> cycle
Rule 35    statement_comp -> read
Rule 36    statement_comp -> write
Rule 37    statement_comp -> function
Rule 38    assignation -> ID EQUALS expression SEMICOLON
Rule 39    condition -> IF LPAR expression RPAR block condition_comp
Rule 40    condition_comp -> ELSE block
Rule 41    condition_comp -> <empty>
Rule 42    cycle -> WHILE LPAR expression RPAR block
Rule 43    read -> READ LPAR var_cte RPAR SEMICOLON
Rule 44    write -> WRITE LPAR var_comp RPAR SEMICOLON
Rule 45    var_comp -> function_call
Rule 46    var_comp -> var_cte
Rule 47    function -> ID LPAR func_params RPAR SEMICOLON
Rule 48    func_params -> var_comp var_more
Rule 49    func_params -> <empty>
Rule 50    var_more -> COMMA var_comp var_more
Rule 51    var_more -> <empty>
Rule 52    expression -> comp expression_comp
Rule 53    expression_comp -> andor comp expression_comp
Rule 54    expression_comp -> <empty>
Rule 55    andor -> AND
Rule 56    andor -> OR
Rule 57    comp -> exp exp_comp
Rule 58    exp_comp -> comparator exp
Rule 59    exp_comp -> <empty>
Rule 60    comparator -> GREATER
Rule 61    comparator -> FEWER
Rule 62    comparator -> GREATEROREQUAL
Rule 63    comparator -> FEWEROREQUAL
Rule 64    comparator -> DIFFERENT
Rule 65    comparator -> EQUALEQUALS
Rule 66    exp -> term more_term
Rule 67    more_term -> operator exp
Rule 68    more_term -> <empty>
Rule 69    operator -> PLUS
Rule 70    operator -> MINUS
Rule 71    term -> factor more_factor
Rule 72    more_factor -> multiplier term
Rule 73    more_factor -> <empty>
Rule 74    multiplier -> MULTIPLICATION
Rule 75    multiplier -> DIVISION
Rule 76    factor -> LPAR exp RPAR
Rule 77    factor -> var_cte add_to_pilaO
Rule 78    add_to_pilaO -> <empty>
Rule 79    var_cte -> CTEINT
Rule 80    var_cte -> CTEDOUBLE
Rule 81    var_cte -> ID
Rule 82    var_cte -> cte_bool
Rule 83    var_cte -> function_call
Rule 84    cte_bool -> TRUE
Rule 85    cte_bool -> FALSE
Rule 86    block -> LBRACKET more_statements RBRACKET
Rule 87    main -> MAIN procedure_name main_block
Rule 88    main_block -> LBRACKET more_vars more_statements RBRACKET
Rule 89    function_call -> ID LPAR func_params RPAR

Terminals, with rules where they appear

ADDAT                : 
AND                  : 55
APPEND               : 
BLACK                : 
BLUE                 : 
BOOL                 : 10 16
CHANGECOLOR          : 
CHANGETHICKNESS      : 
COMMA                : 23 50
CTEDOUBLE            : 80
CTEINT               : 79
CTESTRING            : 
DIFFERENT            : 64
DIVISION             : 75
DOUBLE               : 9 15
DOUBLELIST           : 12
DRAWARC              : 
DRAWCIRCLE           : 
DRAWLINE             : 
DRAWRECTANGLE        : 
DRAWSQUARE           : 
ELSE                 : 40
EQUALEQUALS          : 65
EQUALS               : 38
ERASE                : 
FALSE                : 85
FEWER                : 61
FEWEROREQUAL         : 63
FUNC                 : 13
GREATER              : 60
GREATEROREQUAL       : 62
GREEN                : 
ID                   : 2 13 21 38 47 81 89
IF                   : 39
INT                  : 8 14
INTLIST              : 11
LBRACKET             : 25 86 88
LPAR                 : 13 39 42 43 44 47 76 89
MAIN                 : 87
MEDIUM               : 
MINUS                : 70
MOD                  : 
MOVEFIGURE           : 
MULTIPLICATION       : 74
OR                   : 56
ORANGE               : 
PLUS                 : 69
PREPEND              : 
PURPLE               : 
RBRACKET             : 25 86 88
READ                 : 43
RED                  : 
REMOVEAT             : 
REMOVEFIRST          : 
REMOVELAST           : 
RETURN               : 25
ROTATEFIGURE         : 
RPAR                 : 13 39 42 43 44 47 76 89
SCALEDOWN            : 
SCALEUP              : 
SEMICOLON            : 2 25 38 43 44 47
THICK                : 
THIN                 : 
TRUE                 : 84
VOID                 : 17
WHILE                : 42
WRITE                : 44
YELLOW               : 
error                : 

Nonterminals, with rules where they appear

add_to_param_type    : 21
add_to_pilaO         : 77
andor                : 53
assignation          : 32
block                : 39 40 42
comp                 : 52 53
comparator           : 58
condition            : 33
condition_comp       : 39
cte_bool             : 82
cycle                : 34
exp                  : 57 58 67 76
exp_comp             : 57
expression           : 38 39 42
expression_comp      : 52 53
factor               : 71
func                 : 27
func_block           : 13
func_params          : 47 89
func_type            : 13
function             : 37
function_call        : 45 83
main                 : 1
main_block           : 87
more_factor          : 71
more_func            : 1 13
more_pars            : 21
more_statements      : 25 31 86 88
more_term            : 66
more_vars            : 1 25 88
multiplier           : 72
operator             : 67
pars                 : 13
pars_comp            : 19 23
procedure_name       : 13 87
program              : 0
read                 : 35
statement            : 29
statement_comp       : 31
term                 : 66 72
to_actual_type       : 2
to_var_table         : 2 21
var_comp             : 44 48 50
var_cte              : 25 43 46 77
var_more             : 48 50
var_type             : 2 21
vars                 : 2 6
write                : 36

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . more_vars more_func main
    (6) more_vars -> . vars
    (7) more_vars -> .
    (2) vars -> . var_type to_actual_type ID to_var_table SEMICOLON vars
    (3) vars -> .
    (8) var_type -> . INT
    (9) var_type -> . DOUBLE
    (10) var_type -> . BOOL
    (11) var_type -> . INTLIST
    (12) var_type -> . DOUBLELIST

  ! reduce/reduce conflict for FUNC resolved using rule 3 (vars -> .)
  ! reduce/reduce conflict for MAIN resolved using rule 3 (vars -> .)
    FUNC            reduce using rule 3 (vars -> .)
    MAIN            reduce using rule 3 (vars -> .)
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4
    BOOL            shift and go to state 6
    INTLIST         shift and go to state 7
    DOUBLELIST      shift and go to state 8

  ! FUNC            [ reduce using rule 7 (more_vars -> .) ]
  ! MAIN            [ reduce using rule 7 (more_vars -> .) ]

    vars                           shift and go to state 1
    var_type                       shift and go to state 2
    program                        shift and go to state 5
    more_vars                      shift and go to state 9

state 1

    (6) more_vars -> vars .

    ID              reduce using rule 6 (more_vars -> vars .)
    IF              reduce using rule 6 (more_vars -> vars .)
    WHILE           reduce using rule 6 (more_vars -> vars .)
    READ            reduce using rule 6 (more_vars -> vars .)
    WRITE           reduce using rule 6 (more_vars -> vars .)
    RBRACKET        reduce using rule 6 (more_vars -> vars .)
    FUNC            reduce using rule 6 (more_vars -> vars .)
    MAIN            reduce using rule 6 (more_vars -> vars .)
    RETURN          reduce using rule 6 (more_vars -> vars .)


state 2

    (2) vars -> var_type . to_actual_type ID to_var_table SEMICOLON vars
    (4) to_actual_type -> .

    ID              reduce using rule 4 (to_actual_type -> .)

    to_actual_type                 shift and go to state 10

state 3

    (8) var_type -> INT .

    ID              reduce using rule 8 (var_type -> INT .)


state 4

    (9) var_type -> DOUBLE .

    ID              reduce using rule 9 (var_type -> DOUBLE .)


state 5

    (0) S' -> program .



state 6

    (10) var_type -> BOOL .

    ID              reduce using rule 10 (var_type -> BOOL .)


state 7

    (11) var_type -> INTLIST .

    ID              reduce using rule 11 (var_type -> INTLIST .)


state 8

    (12) var_type -> DOUBLELIST .

    ID              reduce using rule 12 (var_type -> DOUBLELIST .)


state 9

    (1) program -> more_vars . more_func main
    (27) more_func -> . func
    (28) more_func -> .
    (13) func -> . FUNC func_type ID procedure_name LPAR pars RPAR func_block more_func

    MAIN            reduce using rule 28 (more_func -> .)
    FUNC            shift and go to state 13

    more_func                      shift and go to state 12
    func                           shift and go to state 11

state 10

    (2) vars -> var_type to_actual_type . ID to_var_table SEMICOLON vars

    ID              shift and go to state 14


state 11

    (27) more_func -> func .

    MAIN            reduce using rule 27 (more_func -> func .)


state 12

    (1) program -> more_vars more_func . main
    (87) main -> . MAIN procedure_name main_block

    MAIN            shift and go to state 16

    main                           shift and go to state 15

state 13

    (13) func -> FUNC . func_type ID procedure_name LPAR pars RPAR func_block more_func
    (14) func_type -> . INT
    (15) func_type -> . DOUBLE
    (16) func_type -> . BOOL
    (17) func_type -> . VOID

    INT             shift and go to state 20
    DOUBLE          shift and go to state 18
    BOOL            shift and go to state 21
    VOID            shift and go to state 19

    func_type                      shift and go to state 17

state 14

    (2) vars -> var_type to_actual_type ID . to_var_table SEMICOLON vars
    (5) to_var_table -> .

    SEMICOLON       reduce using rule 5 (to_var_table -> .)

    to_var_table                   shift and go to state 22

state 15

    (1) program -> more_vars more_func main .

    $end            reduce using rule 1 (program -> more_vars more_func main .)


state 16

    (87) main -> MAIN . procedure_name main_block
    (18) procedure_name -> .

    LBRACKET        reduce using rule 18 (procedure_name -> .)

    procedure_name                 shift and go to state 23

state 17

    (13) func -> FUNC func_type . ID procedure_name LPAR pars RPAR func_block more_func

    ID              shift and go to state 24


state 18

    (15) func_type -> DOUBLE .

    ID              reduce using rule 15 (func_type -> DOUBLE .)


state 19

    (17) func_type -> VOID .

    ID              reduce using rule 17 (func_type -> VOID .)


state 20

    (14) func_type -> INT .

    ID              reduce using rule 14 (func_type -> INT .)


state 21

    (16) func_type -> BOOL .

    ID              reduce using rule 16 (func_type -> BOOL .)


state 22

    (2) vars -> var_type to_actual_type ID to_var_table . SEMICOLON vars

    SEMICOLON       shift and go to state 25


state 23

    (87) main -> MAIN procedure_name . main_block
    (88) main_block -> . LBRACKET more_vars more_statements RBRACKET

    LBRACKET        shift and go to state 27

    main_block                     shift and go to state 26

state 24

    (13) func -> FUNC func_type ID . procedure_name LPAR pars RPAR func_block more_func
    (18) procedure_name -> .

    LPAR            reduce using rule 18 (procedure_name -> .)

    procedure_name                 shift and go to state 28

state 25

    (2) vars -> var_type to_actual_type ID to_var_table SEMICOLON . vars
    (2) vars -> . var_type to_actual_type ID to_var_table SEMICOLON vars
    (3) vars -> .
    (8) var_type -> . INT
    (9) var_type -> . DOUBLE
    (10) var_type -> . BOOL
    (11) var_type -> . INTLIST
    (12) var_type -> . DOUBLELIST

    FUNC            reduce using rule 3 (vars -> .)
    MAIN            reduce using rule 3 (vars -> .)
    ID              reduce using rule 3 (vars -> .)
    IF              reduce using rule 3 (vars -> .)
    WHILE           reduce using rule 3 (vars -> .)
    READ            reduce using rule 3 (vars -> .)
    WRITE           reduce using rule 3 (vars -> .)
    RBRACKET        reduce using rule 3 (vars -> .)
    RETURN          reduce using rule 3 (vars -> .)
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4
    BOOL            shift and go to state 6
    INTLIST         shift and go to state 7
    DOUBLELIST      shift and go to state 8

    vars                           shift and go to state 29
    var_type                       shift and go to state 2

state 26

    (87) main -> MAIN procedure_name main_block .

    $end            reduce using rule 87 (main -> MAIN procedure_name main_block .)


state 27

    (88) main_block -> LBRACKET . more_vars more_statements RBRACKET
    (6) more_vars -> . vars
    (7) more_vars -> .
    (2) vars -> . var_type to_actual_type ID to_var_table SEMICOLON vars
    (3) vars -> .
    (8) var_type -> . INT
    (9) var_type -> . DOUBLE
    (10) var_type -> . BOOL
    (11) var_type -> . INTLIST
    (12) var_type -> . DOUBLELIST

  ! reduce/reduce conflict for ID resolved using rule 3 (vars -> .)
  ! reduce/reduce conflict for IF resolved using rule 3 (vars -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 3 (vars -> .)
  ! reduce/reduce conflict for READ resolved using rule 3 (vars -> .)
  ! reduce/reduce conflict for WRITE resolved using rule 3 (vars -> .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 3 (vars -> .)
    ID              reduce using rule 3 (vars -> .)
    IF              reduce using rule 3 (vars -> .)
    WHILE           reduce using rule 3 (vars -> .)
    READ            reduce using rule 3 (vars -> .)
    WRITE           reduce using rule 3 (vars -> .)
    RBRACKET        reduce using rule 3 (vars -> .)
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4
    BOOL            shift and go to state 6
    INTLIST         shift and go to state 7
    DOUBLELIST      shift and go to state 8

  ! ID              [ reduce using rule 7 (more_vars -> .) ]
  ! IF              [ reduce using rule 7 (more_vars -> .) ]
  ! WHILE           [ reduce using rule 7 (more_vars -> .) ]
  ! READ            [ reduce using rule 7 (more_vars -> .) ]
  ! WRITE           [ reduce using rule 7 (more_vars -> .) ]
  ! RBRACKET        [ reduce using rule 7 (more_vars -> .) ]

    vars                           shift and go to state 1
    var_type                       shift and go to state 2
    more_vars                      shift and go to state 30

state 28

    (13) func -> FUNC func_type ID procedure_name . LPAR pars RPAR func_block more_func

    LPAR            shift and go to state 31


state 29

    (2) vars -> var_type to_actual_type ID to_var_table SEMICOLON vars .

    ID              reduce using rule 2 (vars -> var_type to_actual_type ID to_var_table SEMICOLON vars .)
    IF              reduce using rule 2 (vars -> var_type to_actual_type ID to_var_table SEMICOLON vars .)
    WHILE           reduce using rule 2 (vars -> var_type to_actual_type ID to_var_table SEMICOLON vars .)
    READ            reduce using rule 2 (vars -> var_type to_actual_type ID to_var_table SEMICOLON vars .)
    WRITE           reduce using rule 2 (vars -> var_type to_actual_type ID to_var_table SEMICOLON vars .)
    RBRACKET        reduce using rule 2 (vars -> var_type to_actual_type ID to_var_table SEMICOLON vars .)
    FUNC            reduce using rule 2 (vars -> var_type to_actual_type ID to_var_table SEMICOLON vars .)
    MAIN            reduce using rule 2 (vars -> var_type to_actual_type ID to_var_table SEMICOLON vars .)
    RETURN          reduce using rule 2 (vars -> var_type to_actual_type ID to_var_table SEMICOLON vars .)


state 30

    (88) main_block -> LBRACKET more_vars . more_statements RBRACKET
    (29) more_statements -> . statement
    (30) more_statements -> .
    (31) statement -> . statement_comp more_statements
    (32) statement_comp -> . assignation
    (33) statement_comp -> . condition
    (34) statement_comp -> . cycle
    (35) statement_comp -> . read
    (36) statement_comp -> . write
    (37) statement_comp -> . function
    (38) assignation -> . ID EQUALS expression SEMICOLON
    (39) condition -> . IF LPAR expression RPAR block condition_comp
    (42) cycle -> . WHILE LPAR expression RPAR block
    (43) read -> . READ LPAR var_cte RPAR SEMICOLON
    (44) write -> . WRITE LPAR var_comp RPAR SEMICOLON
    (47) function -> . ID LPAR func_params RPAR SEMICOLON

    RBRACKET        reduce using rule 30 (more_statements -> .)
    ID              shift and go to state 42
    IF              shift and go to state 44
    WHILE           shift and go to state 33
    READ            shift and go to state 32
    WRITE           shift and go to state 41

    function                       shift and go to state 39
    assignation                    shift and go to state 45
    read                           shift and go to state 40
    write                          shift and go to state 36
    statement                      shift and go to state 37
    statement_comp                 shift and go to state 34
    cycle                          shift and go to state 38
    condition                      shift and go to state 43
    more_statements                shift and go to state 35

state 31

    (13) func -> FUNC func_type ID procedure_name LPAR . pars RPAR func_block more_func
    (19) pars -> . pars_comp
    (20) pars -> .
    (21) pars_comp -> . var_type add_to_param_type ID to_var_table more_pars
    (8) var_type -> . INT
    (9) var_type -> . DOUBLE
    (10) var_type -> . BOOL
    (11) var_type -> . INTLIST
    (12) var_type -> . DOUBLELIST

    RPAR            reduce using rule 20 (pars -> .)
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4
    BOOL            shift and go to state 6
    INTLIST         shift and go to state 7
    DOUBLELIST      shift and go to state 8

    var_type                       shift and go to state 46
    pars                           shift and go to state 47
    pars_comp                      shift and go to state 48

state 32

    (43) read -> READ . LPAR var_cte RPAR SEMICOLON

    LPAR            shift and go to state 49


state 33

    (42) cycle -> WHILE . LPAR expression RPAR block

    LPAR            shift and go to state 50


state 34

    (31) statement -> statement_comp . more_statements
    (29) more_statements -> . statement
    (30) more_statements -> .
    (31) statement -> . statement_comp more_statements
    (32) statement_comp -> . assignation
    (33) statement_comp -> . condition
    (34) statement_comp -> . cycle
    (35) statement_comp -> . read
    (36) statement_comp -> . write
    (37) statement_comp -> . function
    (38) assignation -> . ID EQUALS expression SEMICOLON
    (39) condition -> . IF LPAR expression RPAR block condition_comp
    (42) cycle -> . WHILE LPAR expression RPAR block
    (43) read -> . READ LPAR var_cte RPAR SEMICOLON
    (44) write -> . WRITE LPAR var_comp RPAR SEMICOLON
    (47) function -> . ID LPAR func_params RPAR SEMICOLON

    RBRACKET        reduce using rule 30 (more_statements -> .)
    RETURN          reduce using rule 30 (more_statements -> .)
    ID              shift and go to state 42
    IF              shift and go to state 44
    WHILE           shift and go to state 33
    READ            shift and go to state 32
    WRITE           shift and go to state 41

    function                       shift and go to state 39
    assignation                    shift and go to state 45
    read                           shift and go to state 40
    write                          shift and go to state 36
    statement                      shift and go to state 37
    statement_comp                 shift and go to state 34
    more_statements                shift and go to state 51
    condition                      shift and go to state 43
    cycle                          shift and go to state 38

state 35

    (88) main_block -> LBRACKET more_vars more_statements . RBRACKET

    RBRACKET        shift and go to state 52


state 36

    (36) statement_comp -> write .

    ID              reduce using rule 36 (statement_comp -> write .)
    IF              reduce using rule 36 (statement_comp -> write .)
    WHILE           reduce using rule 36 (statement_comp -> write .)
    READ            reduce using rule 36 (statement_comp -> write .)
    WRITE           reduce using rule 36 (statement_comp -> write .)
    RBRACKET        reduce using rule 36 (statement_comp -> write .)
    RETURN          reduce using rule 36 (statement_comp -> write .)


state 37

    (29) more_statements -> statement .

    RBRACKET        reduce using rule 29 (more_statements -> statement .)
    RETURN          reduce using rule 29 (more_statements -> statement .)


state 38

    (34) statement_comp -> cycle .

    ID              reduce using rule 34 (statement_comp -> cycle .)
    IF              reduce using rule 34 (statement_comp -> cycle .)
    WHILE           reduce using rule 34 (statement_comp -> cycle .)
    READ            reduce using rule 34 (statement_comp -> cycle .)
    WRITE           reduce using rule 34 (statement_comp -> cycle .)
    RBRACKET        reduce using rule 34 (statement_comp -> cycle .)
    RETURN          reduce using rule 34 (statement_comp -> cycle .)


state 39

    (37) statement_comp -> function .

    ID              reduce using rule 37 (statement_comp -> function .)
    IF              reduce using rule 37 (statement_comp -> function .)
    WHILE           reduce using rule 37 (statement_comp -> function .)
    READ            reduce using rule 37 (statement_comp -> function .)
    WRITE           reduce using rule 37 (statement_comp -> function .)
    RBRACKET        reduce using rule 37 (statement_comp -> function .)
    RETURN          reduce using rule 37 (statement_comp -> function .)


state 40

    (35) statement_comp -> read .

    ID              reduce using rule 35 (statement_comp -> read .)
    IF              reduce using rule 35 (statement_comp -> read .)
    WHILE           reduce using rule 35 (statement_comp -> read .)
    READ            reduce using rule 35 (statement_comp -> read .)
    WRITE           reduce using rule 35 (statement_comp -> read .)
    RBRACKET        reduce using rule 35 (statement_comp -> read .)
    RETURN          reduce using rule 35 (statement_comp -> read .)


state 41

    (44) write -> WRITE . LPAR var_comp RPAR SEMICOLON

    LPAR            shift and go to state 53


state 42

    (38) assignation -> ID . EQUALS expression SEMICOLON
    (47) function -> ID . LPAR func_params RPAR SEMICOLON

    EQUALS          shift and go to state 55
    LPAR            shift and go to state 54


state 43

    (33) statement_comp -> condition .

    ID              reduce using rule 33 (statement_comp -> condition .)
    IF              reduce using rule 33 (statement_comp -> condition .)
    WHILE           reduce using rule 33 (statement_comp -> condition .)
    READ            reduce using rule 33 (statement_comp -> condition .)
    WRITE           reduce using rule 33 (statement_comp -> condition .)
    RBRACKET        reduce using rule 33 (statement_comp -> condition .)
    RETURN          reduce using rule 33 (statement_comp -> condition .)


state 44

    (39) condition -> IF . LPAR expression RPAR block condition_comp

    LPAR            shift and go to state 56


state 45

    (32) statement_comp -> assignation .

    ID              reduce using rule 32 (statement_comp -> assignation .)
    IF              reduce using rule 32 (statement_comp -> assignation .)
    WHILE           reduce using rule 32 (statement_comp -> assignation .)
    READ            reduce using rule 32 (statement_comp -> assignation .)
    WRITE           reduce using rule 32 (statement_comp -> assignation .)
    RBRACKET        reduce using rule 32 (statement_comp -> assignation .)
    RETURN          reduce using rule 32 (statement_comp -> assignation .)


state 46

    (21) pars_comp -> var_type . add_to_param_type ID to_var_table more_pars
    (22) add_to_param_type -> .

    ID              reduce using rule 22 (add_to_param_type -> .)

    add_to_param_type              shift and go to state 57

state 47

    (13) func -> FUNC func_type ID procedure_name LPAR pars . RPAR func_block more_func

    RPAR            shift and go to state 58


state 48

    (19) pars -> pars_comp .

    RPAR            reduce using rule 19 (pars -> pars_comp .)


state 49

    (43) read -> READ LPAR . var_cte RPAR SEMICOLON
    (79) var_cte -> . CTEINT
    (80) var_cte -> . CTEDOUBLE
    (81) var_cte -> . ID
    (82) var_cte -> . cte_bool
    (83) var_cte -> . function_call
    (84) cte_bool -> . TRUE
    (85) cte_bool -> . FALSE
    (89) function_call -> . ID LPAR func_params RPAR

    CTEINT          shift and go to state 61
    CTEDOUBLE       shift and go to state 59
    ID              shift and go to state 66
    TRUE            shift and go to state 65
    FALSE           shift and go to state 60

    cte_bool                       shift and go to state 62
    function_call                  shift and go to state 63
    var_cte                        shift and go to state 64

state 50

    (42) cycle -> WHILE LPAR . expression RPAR block
    (52) expression -> . comp expression_comp
    (57) comp -> . exp exp_comp
    (66) exp -> . term more_term
    (71) term -> . factor more_factor
    (76) factor -> . LPAR exp RPAR
    (77) factor -> . var_cte add_to_pilaO
    (79) var_cte -> . CTEINT
    (80) var_cte -> . CTEDOUBLE
    (81) var_cte -> . ID
    (82) var_cte -> . cte_bool
    (83) var_cte -> . function_call
    (84) cte_bool -> . TRUE
    (85) cte_bool -> . FALSE
    (89) function_call -> . ID LPAR func_params RPAR

    LPAR            shift and go to state 67
    CTEINT          shift and go to state 61
    CTEDOUBLE       shift and go to state 59
    ID              shift and go to state 66
    TRUE            shift and go to state 65
    FALSE           shift and go to state 60

    term                           shift and go to state 71
    comp                           shift and go to state 69
    factor                         shift and go to state 68
    cte_bool                       shift and go to state 62
    function_call                  shift and go to state 63
    var_cte                        shift and go to state 70
    exp                            shift and go to state 72
    expression                     shift and go to state 73

state 51

    (31) statement -> statement_comp more_statements .

    RETURN          reduce using rule 31 (statement -> statement_comp more_statements .)
    RBRACKET        reduce using rule 31 (statement -> statement_comp more_statements .)


state 52

    (88) main_block -> LBRACKET more_vars more_statements RBRACKET .

    $end            reduce using rule 88 (main_block -> LBRACKET more_vars more_statements RBRACKET .)


state 53

    (44) write -> WRITE LPAR . var_comp RPAR SEMICOLON
    (45) var_comp -> . function_call
    (46) var_comp -> . var_cte
    (89) function_call -> . ID LPAR func_params RPAR
    (79) var_cte -> . CTEINT
    (80) var_cte -> . CTEDOUBLE
    (81) var_cte -> . ID
    (82) var_cte -> . cte_bool
    (83) var_cte -> . function_call
    (84) cte_bool -> . TRUE
    (85) cte_bool -> . FALSE

    ID              shift and go to state 77
    CTEINT          shift and go to state 61
    CTEDOUBLE       shift and go to state 59
    TRUE            shift and go to state 65
    FALSE           shift and go to state 60

    var_comp                       shift and go to state 74
    cte_bool                       shift and go to state 62
    function_call                  shift and go to state 75
    var_cte                        shift and go to state 76

state 54

    (47) function -> ID LPAR . func_params RPAR SEMICOLON
    (48) func_params -> . var_comp var_more
    (49) func_params -> .
    (45) var_comp -> . function_call
    (46) var_comp -> . var_cte
    (89) function_call -> . ID LPAR func_params RPAR
    (79) var_cte -> . CTEINT
    (80) var_cte -> . CTEDOUBLE
    (81) var_cte -> . ID
    (82) var_cte -> . cte_bool
    (83) var_cte -> . function_call
    (84) cte_bool -> . TRUE
    (85) cte_bool -> . FALSE

    RPAR            reduce using rule 49 (func_params -> .)
    ID              shift and go to state 77
    CTEINT          shift and go to state 61
    CTEDOUBLE       shift and go to state 59
    TRUE            shift and go to state 65
    FALSE           shift and go to state 60

    func_params                    shift and go to state 78
    var_comp                       shift and go to state 79
    cte_bool                       shift and go to state 62
    function_call                  shift and go to state 75
    var_cte                        shift and go to state 76

state 55

    (38) assignation -> ID EQUALS . expression SEMICOLON
    (52) expression -> . comp expression_comp
    (57) comp -> . exp exp_comp
    (66) exp -> . term more_term
    (71) term -> . factor more_factor
    (76) factor -> . LPAR exp RPAR
    (77) factor -> . var_cte add_to_pilaO
    (79) var_cte -> . CTEINT
    (80) var_cte -> . CTEDOUBLE
    (81) var_cte -> . ID
    (82) var_cte -> . cte_bool
    (83) var_cte -> . function_call
    (84) cte_bool -> . TRUE
    (85) cte_bool -> . FALSE
    (89) function_call -> . ID LPAR func_params RPAR

    LPAR            shift and go to state 67
    CTEINT          shift and go to state 61
    CTEDOUBLE       shift and go to state 59
    ID              shift and go to state 66
    TRUE            shift and go to state 65
    FALSE           shift and go to state 60

    term                           shift and go to state 71
    comp                           shift and go to state 69
    factor                         shift and go to state 68
    cte_bool                       shift and go to state 62
    function_call                  shift and go to state 63
    var_cte                        shift and go to state 70
    exp                            shift and go to state 72
    expression                     shift and go to state 80

state 56

    (39) condition -> IF LPAR . expression RPAR block condition_comp
    (52) expression -> . comp expression_comp
    (57) comp -> . exp exp_comp
    (66) exp -> . term more_term
    (71) term -> . factor more_factor
    (76) factor -> . LPAR exp RPAR
    (77) factor -> . var_cte add_to_pilaO
    (79) var_cte -> . CTEINT
    (80) var_cte -> . CTEDOUBLE
    (81) var_cte -> . ID
    (82) var_cte -> . cte_bool
    (83) var_cte -> . function_call
    (84) cte_bool -> . TRUE
    (85) cte_bool -> . FALSE
    (89) function_call -> . ID LPAR func_params RPAR

    LPAR            shift and go to state 67
    CTEINT          shift and go to state 61
    CTEDOUBLE       shift and go to state 59
    ID              shift and go to state 66
    TRUE            shift and go to state 65
    FALSE           shift and go to state 60

    term                           shift and go to state 71
    comp                           shift and go to state 69
    factor                         shift and go to state 68
    cte_bool                       shift and go to state 62
    function_call                  shift and go to state 63
    var_cte                        shift and go to state 70
    exp                            shift and go to state 72
    expression                     shift and go to state 81

state 57

    (21) pars_comp -> var_type add_to_param_type . ID to_var_table more_pars

    ID              shift and go to state 82


state 58

    (13) func -> FUNC func_type ID procedure_name LPAR pars RPAR . func_block more_func
    (25) func_block -> . LBRACKET more_vars more_statements RETURN var_cte SEMICOLON RBRACKET
    (26) func_block -> .

    LBRACKET        shift and go to state 84
    FUNC            reduce using rule 26 (func_block -> .)
    MAIN            reduce using rule 26 (func_block -> .)

    func_block                     shift and go to state 83

state 59

    (80) var_cte -> CTEDOUBLE .

    RPAR            reduce using rule 80 (var_cte -> CTEDOUBLE .)
    MULTIPLICATION  reduce using rule 80 (var_cte -> CTEDOUBLE .)
    DIVISION        reduce using rule 80 (var_cte -> CTEDOUBLE .)
    PLUS            reduce using rule 80 (var_cte -> CTEDOUBLE .)
    MINUS           reduce using rule 80 (var_cte -> CTEDOUBLE .)
    GREATER         reduce using rule 80 (var_cte -> CTEDOUBLE .)
    FEWER           reduce using rule 80 (var_cte -> CTEDOUBLE .)
    GREATEROREQUAL  reduce using rule 80 (var_cte -> CTEDOUBLE .)
    FEWEROREQUAL    reduce using rule 80 (var_cte -> CTEDOUBLE .)
    DIFFERENT       reduce using rule 80 (var_cte -> CTEDOUBLE .)
    EQUALEQUALS     reduce using rule 80 (var_cte -> CTEDOUBLE .)
    AND             reduce using rule 80 (var_cte -> CTEDOUBLE .)
    OR              reduce using rule 80 (var_cte -> CTEDOUBLE .)
    SEMICOLON       reduce using rule 80 (var_cte -> CTEDOUBLE .)
    COMMA           reduce using rule 80 (var_cte -> CTEDOUBLE .)


state 60

    (85) cte_bool -> FALSE .

    MULTIPLICATION  reduce using rule 85 (cte_bool -> FALSE .)
    DIVISION        reduce using rule 85 (cte_bool -> FALSE .)
    PLUS            reduce using rule 85 (cte_bool -> FALSE .)
    MINUS           reduce using rule 85 (cte_bool -> FALSE .)
    RPAR            reduce using rule 85 (cte_bool -> FALSE .)
    GREATER         reduce using rule 85 (cte_bool -> FALSE .)
    FEWER           reduce using rule 85 (cte_bool -> FALSE .)
    GREATEROREQUAL  reduce using rule 85 (cte_bool -> FALSE .)
    FEWEROREQUAL    reduce using rule 85 (cte_bool -> FALSE .)
    DIFFERENT       reduce using rule 85 (cte_bool -> FALSE .)
    EQUALEQUALS     reduce using rule 85 (cte_bool -> FALSE .)
    AND             reduce using rule 85 (cte_bool -> FALSE .)
    OR              reduce using rule 85 (cte_bool -> FALSE .)
    SEMICOLON       reduce using rule 85 (cte_bool -> FALSE .)
    COMMA           reduce using rule 85 (cte_bool -> FALSE .)


state 61

    (79) var_cte -> CTEINT .

    RPAR            reduce using rule 79 (var_cte -> CTEINT .)
    MULTIPLICATION  reduce using rule 79 (var_cte -> CTEINT .)
    DIVISION        reduce using rule 79 (var_cte -> CTEINT .)
    PLUS            reduce using rule 79 (var_cte -> CTEINT .)
    MINUS           reduce using rule 79 (var_cte -> CTEINT .)
    GREATER         reduce using rule 79 (var_cte -> CTEINT .)
    FEWER           reduce using rule 79 (var_cte -> CTEINT .)
    GREATEROREQUAL  reduce using rule 79 (var_cte -> CTEINT .)
    FEWEROREQUAL    reduce using rule 79 (var_cte -> CTEINT .)
    DIFFERENT       reduce using rule 79 (var_cte -> CTEINT .)
    EQUALEQUALS     reduce using rule 79 (var_cte -> CTEINT .)
    AND             reduce using rule 79 (var_cte -> CTEINT .)
    OR              reduce using rule 79 (var_cte -> CTEINT .)
    SEMICOLON       reduce using rule 79 (var_cte -> CTEINT .)
    COMMA           reduce using rule 79 (var_cte -> CTEINT .)


state 62

    (82) var_cte -> cte_bool .

    RPAR            reduce using rule 82 (var_cte -> cte_bool .)
    MULTIPLICATION  reduce using rule 82 (var_cte -> cte_bool .)
    DIVISION        reduce using rule 82 (var_cte -> cte_bool .)
    PLUS            reduce using rule 82 (var_cte -> cte_bool .)
    MINUS           reduce using rule 82 (var_cte -> cte_bool .)
    GREATER         reduce using rule 82 (var_cte -> cte_bool .)
    FEWER           reduce using rule 82 (var_cte -> cte_bool .)
    GREATEROREQUAL  reduce using rule 82 (var_cte -> cte_bool .)
    FEWEROREQUAL    reduce using rule 82 (var_cte -> cte_bool .)
    DIFFERENT       reduce using rule 82 (var_cte -> cte_bool .)
    EQUALEQUALS     reduce using rule 82 (var_cte -> cte_bool .)
    AND             reduce using rule 82 (var_cte -> cte_bool .)
    OR              reduce using rule 82 (var_cte -> cte_bool .)
    SEMICOLON       reduce using rule 82 (var_cte -> cte_bool .)
    COMMA           reduce using rule 82 (var_cte -> cte_bool .)


state 63

    (83) var_cte -> function_call .

    MULTIPLICATION  reduce using rule 83 (var_cte -> function_call .)
    DIVISION        reduce using rule 83 (var_cte -> function_call .)
    PLUS            reduce using rule 83 (var_cte -> function_call .)
    MINUS           reduce using rule 83 (var_cte -> function_call .)
    GREATER         reduce using rule 83 (var_cte -> function_call .)
    FEWER           reduce using rule 83 (var_cte -> function_call .)
    GREATEROREQUAL  reduce using rule 83 (var_cte -> function_call .)
    FEWEROREQUAL    reduce using rule 83 (var_cte -> function_call .)
    DIFFERENT       reduce using rule 83 (var_cte -> function_call .)
    EQUALEQUALS     reduce using rule 83 (var_cte -> function_call .)
    AND             reduce using rule 83 (var_cte -> function_call .)
    OR              reduce using rule 83 (var_cte -> function_call .)
    RPAR            reduce using rule 83 (var_cte -> function_call .)
    SEMICOLON       reduce using rule 83 (var_cte -> function_call .)


state 64

    (43) read -> READ LPAR var_cte . RPAR SEMICOLON

    RPAR            shift and go to state 85


state 65

    (84) cte_bool -> TRUE .

    MULTIPLICATION  reduce using rule 84 (cte_bool -> TRUE .)
    DIVISION        reduce using rule 84 (cte_bool -> TRUE .)
    PLUS            reduce using rule 84 (cte_bool -> TRUE .)
    MINUS           reduce using rule 84 (cte_bool -> TRUE .)
    RPAR            reduce using rule 84 (cte_bool -> TRUE .)
    GREATER         reduce using rule 84 (cte_bool -> TRUE .)
    FEWER           reduce using rule 84 (cte_bool -> TRUE .)
    GREATEROREQUAL  reduce using rule 84 (cte_bool -> TRUE .)
    FEWEROREQUAL    reduce using rule 84 (cte_bool -> TRUE .)
    DIFFERENT       reduce using rule 84 (cte_bool -> TRUE .)
    EQUALEQUALS     reduce using rule 84 (cte_bool -> TRUE .)
    AND             reduce using rule 84 (cte_bool -> TRUE .)
    OR              reduce using rule 84 (cte_bool -> TRUE .)
    SEMICOLON       reduce using rule 84 (cte_bool -> TRUE .)
    COMMA           reduce using rule 84 (cte_bool -> TRUE .)


state 66

    (81) var_cte -> ID .
    (89) function_call -> ID . LPAR func_params RPAR

    MULTIPLICATION  reduce using rule 81 (var_cte -> ID .)
    DIVISION        reduce using rule 81 (var_cte -> ID .)
    PLUS            reduce using rule 81 (var_cte -> ID .)
    MINUS           reduce using rule 81 (var_cte -> ID .)
    GREATER         reduce using rule 81 (var_cte -> ID .)
    FEWER           reduce using rule 81 (var_cte -> ID .)
    GREATEROREQUAL  reduce using rule 81 (var_cte -> ID .)
    FEWEROREQUAL    reduce using rule 81 (var_cte -> ID .)
    DIFFERENT       reduce using rule 81 (var_cte -> ID .)
    EQUALEQUALS     reduce using rule 81 (var_cte -> ID .)
    AND             reduce using rule 81 (var_cte -> ID .)
    OR              reduce using rule 81 (var_cte -> ID .)
    RPAR            reduce using rule 81 (var_cte -> ID .)
    SEMICOLON       reduce using rule 81 (var_cte -> ID .)
    LPAR            shift and go to state 86


state 67

    (76) factor -> LPAR . exp RPAR
    (66) exp -> . term more_term
    (71) term -> . factor more_factor
    (76) factor -> . LPAR exp RPAR
    (77) factor -> . var_cte add_to_pilaO
    (79) var_cte -> . CTEINT
    (80) var_cte -> . CTEDOUBLE
    (81) var_cte -> . ID
    (82) var_cte -> . cte_bool
    (83) var_cte -> . function_call
    (84) cte_bool -> . TRUE
    (85) cte_bool -> . FALSE
    (89) function_call -> . ID LPAR func_params RPAR

    LPAR            shift and go to state 67
    CTEINT          shift and go to state 61
    CTEDOUBLE       shift and go to state 59
    ID              shift and go to state 66
    TRUE            shift and go to state 65
    FALSE           shift and go to state 60

    term                           shift and go to state 71
    cte_bool                       shift and go to state 62
    function_call                  shift and go to state 63
    var_cte                        shift and go to state 70
    exp                            shift and go to state 87
    factor                         shift and go to state 68

state 68

    (71) term -> factor . more_factor
    (72) more_factor -> . multiplier term
    (73) more_factor -> .
    (74) multiplier -> . MULTIPLICATION
    (75) multiplier -> . DIVISION

    PLUS            reduce using rule 73 (more_factor -> .)
    MINUS           reduce using rule 73 (more_factor -> .)
    GREATER         reduce using rule 73 (more_factor -> .)
    FEWER           reduce using rule 73 (more_factor -> .)
    GREATEROREQUAL  reduce using rule 73 (more_factor -> .)
    FEWEROREQUAL    reduce using rule 73 (more_factor -> .)
    DIFFERENT       reduce using rule 73 (more_factor -> .)
    EQUALEQUALS     reduce using rule 73 (more_factor -> .)
    AND             reduce using rule 73 (more_factor -> .)
    OR              reduce using rule 73 (more_factor -> .)
    RPAR            reduce using rule 73 (more_factor -> .)
    SEMICOLON       reduce using rule 73 (more_factor -> .)
    MULTIPLICATION  shift and go to state 91
    DIVISION        shift and go to state 88

    multiplier                     shift and go to state 90
    more_factor                    shift and go to state 89

state 69

    (52) expression -> comp . expression_comp
    (53) expression_comp -> . andor comp expression_comp
    (54) expression_comp -> .
    (55) andor -> . AND
    (56) andor -> . OR

    RPAR            reduce using rule 54 (expression_comp -> .)
    SEMICOLON       reduce using rule 54 (expression_comp -> .)
    AND             shift and go to state 92
    OR              shift and go to state 95

    expression_comp                shift and go to state 93
    andor                          shift and go to state 94

state 70

    (77) factor -> var_cte . add_to_pilaO
    (78) add_to_pilaO -> .

    MULTIPLICATION  reduce using rule 78 (add_to_pilaO -> .)
    DIVISION        reduce using rule 78 (add_to_pilaO -> .)
    PLUS            reduce using rule 78 (add_to_pilaO -> .)
    MINUS           reduce using rule 78 (add_to_pilaO -> .)
    GREATER         reduce using rule 78 (add_to_pilaO -> .)
    FEWER           reduce using rule 78 (add_to_pilaO -> .)
    GREATEROREQUAL  reduce using rule 78 (add_to_pilaO -> .)
    FEWEROREQUAL    reduce using rule 78 (add_to_pilaO -> .)
    DIFFERENT       reduce using rule 78 (add_to_pilaO -> .)
    EQUALEQUALS     reduce using rule 78 (add_to_pilaO -> .)
    AND             reduce using rule 78 (add_to_pilaO -> .)
    OR              reduce using rule 78 (add_to_pilaO -> .)
    RPAR            reduce using rule 78 (add_to_pilaO -> .)
    SEMICOLON       reduce using rule 78 (add_to_pilaO -> .)

    add_to_pilaO                   shift and go to state 96

state 71

    (66) exp -> term . more_term
    (67) more_term -> . operator exp
    (68) more_term -> .
    (69) operator -> . PLUS
    (70) operator -> . MINUS

    GREATER         reduce using rule 68 (more_term -> .)
    FEWER           reduce using rule 68 (more_term -> .)
    GREATEROREQUAL  reduce using rule 68 (more_term -> .)
    FEWEROREQUAL    reduce using rule 68 (more_term -> .)
    DIFFERENT       reduce using rule 68 (more_term -> .)
    EQUALEQUALS     reduce using rule 68 (more_term -> .)
    AND             reduce using rule 68 (more_term -> .)
    OR              reduce using rule 68 (more_term -> .)
    RPAR            reduce using rule 68 (more_term -> .)
    SEMICOLON       reduce using rule 68 (more_term -> .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 100

    operator                       shift and go to state 99
    more_term                      shift and go to state 97

state 72

    (57) comp -> exp . exp_comp
    (58) exp_comp -> . comparator exp
    (59) exp_comp -> .
    (60) comparator -> . GREATER
    (61) comparator -> . FEWER
    (62) comparator -> . GREATEROREQUAL
    (63) comparator -> . FEWEROREQUAL
    (64) comparator -> . DIFFERENT
    (65) comparator -> . EQUALEQUALS

    AND             reduce using rule 59 (exp_comp -> .)
    OR              reduce using rule 59 (exp_comp -> .)
    RPAR            reduce using rule 59 (exp_comp -> .)
    SEMICOLON       reduce using rule 59 (exp_comp -> .)
    GREATER         shift and go to state 102
    FEWER           shift and go to state 106
    GREATEROREQUAL  shift and go to state 107
    FEWEROREQUAL    shift and go to state 105
    DIFFERENT       shift and go to state 101
    EQUALEQUALS     shift and go to state 104

    exp_comp                       shift and go to state 108
    comparator                     shift and go to state 103

state 73

    (42) cycle -> WHILE LPAR expression . RPAR block

    RPAR            shift and go to state 109


state 74

    (44) write -> WRITE LPAR var_comp . RPAR SEMICOLON

    RPAR            shift and go to state 110


state 75

    (45) var_comp -> function_call .
    (83) var_cte -> function_call .

  ! reduce/reduce conflict for RPAR resolved using rule 45 (var_comp -> function_call .)
  ! reduce/reduce conflict for COMMA resolved using rule 45 (var_comp -> function_call .)
    RPAR            reduce using rule 45 (var_comp -> function_call .)
    COMMA           reduce using rule 45 (var_comp -> function_call .)

  ! RPAR            [ reduce using rule 83 (var_cte -> function_call .) ]
  ! COMMA           [ reduce using rule 83 (var_cte -> function_call .) ]


state 76

    (46) var_comp -> var_cte .

    RPAR            reduce using rule 46 (var_comp -> var_cte .)
    COMMA           reduce using rule 46 (var_comp -> var_cte .)


state 77

    (89) function_call -> ID . LPAR func_params RPAR
    (81) var_cte -> ID .

    LPAR            shift and go to state 86
    RPAR            reduce using rule 81 (var_cte -> ID .)
    COMMA           reduce using rule 81 (var_cte -> ID .)


state 78

    (47) function -> ID LPAR func_params . RPAR SEMICOLON

    RPAR            shift and go to state 111


state 79

    (48) func_params -> var_comp . var_more
    (50) var_more -> . COMMA var_comp var_more
    (51) var_more -> .

    COMMA           shift and go to state 113
    RPAR            reduce using rule 51 (var_more -> .)

    var_more                       shift and go to state 112

state 80

    (38) assignation -> ID EQUALS expression . SEMICOLON

    SEMICOLON       shift and go to state 114


state 81

    (39) condition -> IF LPAR expression . RPAR block condition_comp

    RPAR            shift and go to state 115


state 82

    (21) pars_comp -> var_type add_to_param_type ID . to_var_table more_pars
    (5) to_var_table -> .

    COMMA           reduce using rule 5 (to_var_table -> .)
    RPAR            reduce using rule 5 (to_var_table -> .)

    to_var_table                   shift and go to state 116

state 83

    (13) func -> FUNC func_type ID procedure_name LPAR pars RPAR func_block . more_func
    (27) more_func -> . func
    (28) more_func -> .
    (13) func -> . FUNC func_type ID procedure_name LPAR pars RPAR func_block more_func

    MAIN            reduce using rule 28 (more_func -> .)
    FUNC            shift and go to state 13

    func                           shift and go to state 11
    more_func                      shift and go to state 117

state 84

    (25) func_block -> LBRACKET . more_vars more_statements RETURN var_cte SEMICOLON RBRACKET
    (6) more_vars -> . vars
    (7) more_vars -> .
    (2) vars -> . var_type to_actual_type ID to_var_table SEMICOLON vars
    (3) vars -> .
    (8) var_type -> . INT
    (9) var_type -> . DOUBLE
    (10) var_type -> . BOOL
    (11) var_type -> . INTLIST
    (12) var_type -> . DOUBLELIST

  ! reduce/reduce conflict for ID resolved using rule 3 (vars -> .)
  ! reduce/reduce conflict for IF resolved using rule 3 (vars -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 3 (vars -> .)
  ! reduce/reduce conflict for READ resolved using rule 3 (vars -> .)
  ! reduce/reduce conflict for WRITE resolved using rule 3 (vars -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 3 (vars -> .)
    ID              reduce using rule 3 (vars -> .)
    IF              reduce using rule 3 (vars -> .)
    WHILE           reduce using rule 3 (vars -> .)
    READ            reduce using rule 3 (vars -> .)
    WRITE           reduce using rule 3 (vars -> .)
    RETURN          reduce using rule 3 (vars -> .)
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4
    BOOL            shift and go to state 6
    INTLIST         shift and go to state 7
    DOUBLELIST      shift and go to state 8

  ! ID              [ reduce using rule 7 (more_vars -> .) ]
  ! IF              [ reduce using rule 7 (more_vars -> .) ]
  ! WHILE           [ reduce using rule 7 (more_vars -> .) ]
  ! READ            [ reduce using rule 7 (more_vars -> .) ]
  ! WRITE           [ reduce using rule 7 (more_vars -> .) ]
  ! RETURN          [ reduce using rule 7 (more_vars -> .) ]

    vars                           shift and go to state 1
    var_type                       shift and go to state 2
    more_vars                      shift and go to state 118

state 85

    (43) read -> READ LPAR var_cte RPAR . SEMICOLON

    SEMICOLON       shift and go to state 119


state 86

    (89) function_call -> ID LPAR . func_params RPAR
    (48) func_params -> . var_comp var_more
    (49) func_params -> .
    (45) var_comp -> . function_call
    (46) var_comp -> . var_cte
    (89) function_call -> . ID LPAR func_params RPAR
    (79) var_cte -> . CTEINT
    (80) var_cte -> . CTEDOUBLE
    (81) var_cte -> . ID
    (82) var_cte -> . cte_bool
    (83) var_cte -> . function_call
    (84) cte_bool -> . TRUE
    (85) cte_bool -> . FALSE

    RPAR            reduce using rule 49 (func_params -> .)
    ID              shift and go to state 77
    CTEINT          shift and go to state 61
    CTEDOUBLE       shift and go to state 59
    TRUE            shift and go to state 65
    FALSE           shift and go to state 60

    func_params                    shift and go to state 120
    var_comp                       shift and go to state 79
    cte_bool                       shift and go to state 62
    function_call                  shift and go to state 75
    var_cte                        shift and go to state 76

state 87

    (76) factor -> LPAR exp . RPAR

    RPAR            shift and go to state 121


state 88

    (75) multiplier -> DIVISION .

    LPAR            reduce using rule 75 (multiplier -> DIVISION .)
    CTEINT          reduce using rule 75 (multiplier -> DIVISION .)
    CTEDOUBLE       reduce using rule 75 (multiplier -> DIVISION .)
    ID              reduce using rule 75 (multiplier -> DIVISION .)
    TRUE            reduce using rule 75 (multiplier -> DIVISION .)
    FALSE           reduce using rule 75 (multiplier -> DIVISION .)


state 89

    (71) term -> factor more_factor .

    PLUS            reduce using rule 71 (term -> factor more_factor .)
    MINUS           reduce using rule 71 (term -> factor more_factor .)
    GREATER         reduce using rule 71 (term -> factor more_factor .)
    FEWER           reduce using rule 71 (term -> factor more_factor .)
    GREATEROREQUAL  reduce using rule 71 (term -> factor more_factor .)
    FEWEROREQUAL    reduce using rule 71 (term -> factor more_factor .)
    DIFFERENT       reduce using rule 71 (term -> factor more_factor .)
    EQUALEQUALS     reduce using rule 71 (term -> factor more_factor .)
    AND             reduce using rule 71 (term -> factor more_factor .)
    OR              reduce using rule 71 (term -> factor more_factor .)
    RPAR            reduce using rule 71 (term -> factor more_factor .)
    SEMICOLON       reduce using rule 71 (term -> factor more_factor .)


state 90

    (72) more_factor -> multiplier . term
    (71) term -> . factor more_factor
    (76) factor -> . LPAR exp RPAR
    (77) factor -> . var_cte add_to_pilaO
    (79) var_cte -> . CTEINT
    (80) var_cte -> . CTEDOUBLE
    (81) var_cte -> . ID
    (82) var_cte -> . cte_bool
    (83) var_cte -> . function_call
    (84) cte_bool -> . TRUE
    (85) cte_bool -> . FALSE
    (89) function_call -> . ID LPAR func_params RPAR

    LPAR            shift and go to state 67
    CTEINT          shift and go to state 61
    CTEDOUBLE       shift and go to state 59
    ID              shift and go to state 66
    TRUE            shift and go to state 65
    FALSE           shift and go to state 60

    term                           shift and go to state 122
    cte_bool                       shift and go to state 62
    function_call                  shift and go to state 63
    var_cte                        shift and go to state 70
    factor                         shift and go to state 68

state 91

    (74) multiplier -> MULTIPLICATION .

    LPAR            reduce using rule 74 (multiplier -> MULTIPLICATION .)
    CTEINT          reduce using rule 74 (multiplier -> MULTIPLICATION .)
    CTEDOUBLE       reduce using rule 74 (multiplier -> MULTIPLICATION .)
    ID              reduce using rule 74 (multiplier -> MULTIPLICATION .)
    TRUE            reduce using rule 74 (multiplier -> MULTIPLICATION .)
    FALSE           reduce using rule 74 (multiplier -> MULTIPLICATION .)


state 92

    (55) andor -> AND .

    LPAR            reduce using rule 55 (andor -> AND .)
    CTEINT          reduce using rule 55 (andor -> AND .)
    CTEDOUBLE       reduce using rule 55 (andor -> AND .)
    ID              reduce using rule 55 (andor -> AND .)
    TRUE            reduce using rule 55 (andor -> AND .)
    FALSE           reduce using rule 55 (andor -> AND .)


state 93

    (52) expression -> comp expression_comp .

    SEMICOLON       reduce using rule 52 (expression -> comp expression_comp .)
    RPAR            reduce using rule 52 (expression -> comp expression_comp .)


state 94

    (53) expression_comp -> andor . comp expression_comp
    (57) comp -> . exp exp_comp
    (66) exp -> . term more_term
    (71) term -> . factor more_factor
    (76) factor -> . LPAR exp RPAR
    (77) factor -> . var_cte add_to_pilaO
    (79) var_cte -> . CTEINT
    (80) var_cte -> . CTEDOUBLE
    (81) var_cte -> . ID
    (82) var_cte -> . cte_bool
    (83) var_cte -> . function_call
    (84) cte_bool -> . TRUE
    (85) cte_bool -> . FALSE
    (89) function_call -> . ID LPAR func_params RPAR

    LPAR            shift and go to state 67
    CTEINT          shift and go to state 61
    CTEDOUBLE       shift and go to state 59
    ID              shift and go to state 66
    TRUE            shift and go to state 65
    FALSE           shift and go to state 60

    term                           shift and go to state 71
    comp                           shift and go to state 123
    factor                         shift and go to state 68
    cte_bool                       shift and go to state 62
    function_call                  shift and go to state 63
    var_cte                        shift and go to state 70
    exp                            shift and go to state 72

state 95

    (56) andor -> OR .

    LPAR            reduce using rule 56 (andor -> OR .)
    CTEINT          reduce using rule 56 (andor -> OR .)
    CTEDOUBLE       reduce using rule 56 (andor -> OR .)
    ID              reduce using rule 56 (andor -> OR .)
    TRUE            reduce using rule 56 (andor -> OR .)
    FALSE           reduce using rule 56 (andor -> OR .)


state 96

    (77) factor -> var_cte add_to_pilaO .

    MULTIPLICATION  reduce using rule 77 (factor -> var_cte add_to_pilaO .)
    DIVISION        reduce using rule 77 (factor -> var_cte add_to_pilaO .)
    PLUS            reduce using rule 77 (factor -> var_cte add_to_pilaO .)
    MINUS           reduce using rule 77 (factor -> var_cte add_to_pilaO .)
    GREATER         reduce using rule 77 (factor -> var_cte add_to_pilaO .)
    FEWER           reduce using rule 77 (factor -> var_cte add_to_pilaO .)
    GREATEROREQUAL  reduce using rule 77 (factor -> var_cte add_to_pilaO .)
    FEWEROREQUAL    reduce using rule 77 (factor -> var_cte add_to_pilaO .)
    DIFFERENT       reduce using rule 77 (factor -> var_cte add_to_pilaO .)
    EQUALEQUALS     reduce using rule 77 (factor -> var_cte add_to_pilaO .)
    AND             reduce using rule 77 (factor -> var_cte add_to_pilaO .)
    OR              reduce using rule 77 (factor -> var_cte add_to_pilaO .)
    RPAR            reduce using rule 77 (factor -> var_cte add_to_pilaO .)
    SEMICOLON       reduce using rule 77 (factor -> var_cte add_to_pilaO .)


state 97

    (66) exp -> term more_term .

    GREATER         reduce using rule 66 (exp -> term more_term .)
    FEWER           reduce using rule 66 (exp -> term more_term .)
    GREATEROREQUAL  reduce using rule 66 (exp -> term more_term .)
    FEWEROREQUAL    reduce using rule 66 (exp -> term more_term .)
    DIFFERENT       reduce using rule 66 (exp -> term more_term .)
    EQUALEQUALS     reduce using rule 66 (exp -> term more_term .)
    AND             reduce using rule 66 (exp -> term more_term .)
    OR              reduce using rule 66 (exp -> term more_term .)
    RPAR            reduce using rule 66 (exp -> term more_term .)
    SEMICOLON       reduce using rule 66 (exp -> term more_term .)


state 98

    (69) operator -> PLUS .

    LPAR            reduce using rule 69 (operator -> PLUS .)
    CTEINT          reduce using rule 69 (operator -> PLUS .)
    CTEDOUBLE       reduce using rule 69 (operator -> PLUS .)
    ID              reduce using rule 69 (operator -> PLUS .)
    TRUE            reduce using rule 69 (operator -> PLUS .)
    FALSE           reduce using rule 69 (operator -> PLUS .)


state 99

    (67) more_term -> operator . exp
    (66) exp -> . term more_term
    (71) term -> . factor more_factor
    (76) factor -> . LPAR exp RPAR
    (77) factor -> . var_cte add_to_pilaO
    (79) var_cte -> . CTEINT
    (80) var_cte -> . CTEDOUBLE
    (81) var_cte -> . ID
    (82) var_cte -> . cte_bool
    (83) var_cte -> . function_call
    (84) cte_bool -> . TRUE
    (85) cte_bool -> . FALSE
    (89) function_call -> . ID LPAR func_params RPAR

    LPAR            shift and go to state 67
    CTEINT          shift and go to state 61
    CTEDOUBLE       shift and go to state 59
    ID              shift and go to state 66
    TRUE            shift and go to state 65
    FALSE           shift and go to state 60

    term                           shift and go to state 71
    cte_bool                       shift and go to state 62
    function_call                  shift and go to state 63
    var_cte                        shift and go to state 70
    exp                            shift and go to state 124
    factor                         shift and go to state 68

state 100

    (70) operator -> MINUS .

    LPAR            reduce using rule 70 (operator -> MINUS .)
    CTEINT          reduce using rule 70 (operator -> MINUS .)
    CTEDOUBLE       reduce using rule 70 (operator -> MINUS .)
    ID              reduce using rule 70 (operator -> MINUS .)
    TRUE            reduce using rule 70 (operator -> MINUS .)
    FALSE           reduce using rule 70 (operator -> MINUS .)


state 101

    (64) comparator -> DIFFERENT .

    LPAR            reduce using rule 64 (comparator -> DIFFERENT .)
    CTEINT          reduce using rule 64 (comparator -> DIFFERENT .)
    CTEDOUBLE       reduce using rule 64 (comparator -> DIFFERENT .)
    ID              reduce using rule 64 (comparator -> DIFFERENT .)
    TRUE            reduce using rule 64 (comparator -> DIFFERENT .)
    FALSE           reduce using rule 64 (comparator -> DIFFERENT .)


state 102

    (60) comparator -> GREATER .

    LPAR            reduce using rule 60 (comparator -> GREATER .)
    CTEINT          reduce using rule 60 (comparator -> GREATER .)
    CTEDOUBLE       reduce using rule 60 (comparator -> GREATER .)
    ID              reduce using rule 60 (comparator -> GREATER .)
    TRUE            reduce using rule 60 (comparator -> GREATER .)
    FALSE           reduce using rule 60 (comparator -> GREATER .)


state 103

    (58) exp_comp -> comparator . exp
    (66) exp -> . term more_term
    (71) term -> . factor more_factor
    (76) factor -> . LPAR exp RPAR
    (77) factor -> . var_cte add_to_pilaO
    (79) var_cte -> . CTEINT
    (80) var_cte -> . CTEDOUBLE
    (81) var_cte -> . ID
    (82) var_cte -> . cte_bool
    (83) var_cte -> . function_call
    (84) cte_bool -> . TRUE
    (85) cte_bool -> . FALSE
    (89) function_call -> . ID LPAR func_params RPAR

    LPAR            shift and go to state 67
    CTEINT          shift and go to state 61
    CTEDOUBLE       shift and go to state 59
    ID              shift and go to state 66
    TRUE            shift and go to state 65
    FALSE           shift and go to state 60

    term                           shift and go to state 71
    cte_bool                       shift and go to state 62
    function_call                  shift and go to state 63
    var_cte                        shift and go to state 70
    exp                            shift and go to state 125
    factor                         shift and go to state 68

state 104

    (65) comparator -> EQUALEQUALS .

    LPAR            reduce using rule 65 (comparator -> EQUALEQUALS .)
    CTEINT          reduce using rule 65 (comparator -> EQUALEQUALS .)
    CTEDOUBLE       reduce using rule 65 (comparator -> EQUALEQUALS .)
    ID              reduce using rule 65 (comparator -> EQUALEQUALS .)
    TRUE            reduce using rule 65 (comparator -> EQUALEQUALS .)
    FALSE           reduce using rule 65 (comparator -> EQUALEQUALS .)


state 105

    (63) comparator -> FEWEROREQUAL .

    LPAR            reduce using rule 63 (comparator -> FEWEROREQUAL .)
    CTEINT          reduce using rule 63 (comparator -> FEWEROREQUAL .)
    CTEDOUBLE       reduce using rule 63 (comparator -> FEWEROREQUAL .)
    ID              reduce using rule 63 (comparator -> FEWEROREQUAL .)
    TRUE            reduce using rule 63 (comparator -> FEWEROREQUAL .)
    FALSE           reduce using rule 63 (comparator -> FEWEROREQUAL .)


state 106

    (61) comparator -> FEWER .

    LPAR            reduce using rule 61 (comparator -> FEWER .)
    CTEINT          reduce using rule 61 (comparator -> FEWER .)
    CTEDOUBLE       reduce using rule 61 (comparator -> FEWER .)
    ID              reduce using rule 61 (comparator -> FEWER .)
    TRUE            reduce using rule 61 (comparator -> FEWER .)
    FALSE           reduce using rule 61 (comparator -> FEWER .)


state 107

    (62) comparator -> GREATEROREQUAL .

    LPAR            reduce using rule 62 (comparator -> GREATEROREQUAL .)
    CTEINT          reduce using rule 62 (comparator -> GREATEROREQUAL .)
    CTEDOUBLE       reduce using rule 62 (comparator -> GREATEROREQUAL .)
    ID              reduce using rule 62 (comparator -> GREATEROREQUAL .)
    TRUE            reduce using rule 62 (comparator -> GREATEROREQUAL .)
    FALSE           reduce using rule 62 (comparator -> GREATEROREQUAL .)


state 108

    (57) comp -> exp exp_comp .

    AND             reduce using rule 57 (comp -> exp exp_comp .)
    OR              reduce using rule 57 (comp -> exp exp_comp .)
    RPAR            reduce using rule 57 (comp -> exp exp_comp .)
    SEMICOLON       reduce using rule 57 (comp -> exp exp_comp .)


state 109

    (42) cycle -> WHILE LPAR expression RPAR . block
    (86) block -> . LBRACKET more_statements RBRACKET

    LBRACKET        shift and go to state 126

    block                          shift and go to state 127

state 110

    (44) write -> WRITE LPAR var_comp RPAR . SEMICOLON

    SEMICOLON       shift and go to state 128


state 111

    (47) function -> ID LPAR func_params RPAR . SEMICOLON

    SEMICOLON       shift and go to state 129


state 112

    (48) func_params -> var_comp var_more .

    RPAR            reduce using rule 48 (func_params -> var_comp var_more .)


state 113

    (50) var_more -> COMMA . var_comp var_more
    (45) var_comp -> . function_call
    (46) var_comp -> . var_cte
    (89) function_call -> . ID LPAR func_params RPAR
    (79) var_cte -> . CTEINT
    (80) var_cte -> . CTEDOUBLE
    (81) var_cte -> . ID
    (82) var_cte -> . cte_bool
    (83) var_cte -> . function_call
    (84) cte_bool -> . TRUE
    (85) cte_bool -> . FALSE

    ID              shift and go to state 77
    CTEINT          shift and go to state 61
    CTEDOUBLE       shift and go to state 59
    TRUE            shift and go to state 65
    FALSE           shift and go to state 60

    var_comp                       shift and go to state 130
    cte_bool                       shift and go to state 62
    function_call                  shift and go to state 75
    var_cte                        shift and go to state 76

state 114

    (38) assignation -> ID EQUALS expression SEMICOLON .

    ID              reduce using rule 38 (assignation -> ID EQUALS expression SEMICOLON .)
    IF              reduce using rule 38 (assignation -> ID EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 38 (assignation -> ID EQUALS expression SEMICOLON .)
    READ            reduce using rule 38 (assignation -> ID EQUALS expression SEMICOLON .)
    WRITE           reduce using rule 38 (assignation -> ID EQUALS expression SEMICOLON .)
    RBRACKET        reduce using rule 38 (assignation -> ID EQUALS expression SEMICOLON .)
    RETURN          reduce using rule 38 (assignation -> ID EQUALS expression SEMICOLON .)


state 115

    (39) condition -> IF LPAR expression RPAR . block condition_comp
    (86) block -> . LBRACKET more_statements RBRACKET

    LBRACKET        shift and go to state 126

    block                          shift and go to state 131

state 116

    (21) pars_comp -> var_type add_to_param_type ID to_var_table . more_pars
    (23) more_pars -> . COMMA pars_comp
    (24) more_pars -> .

    COMMA           shift and go to state 133
    RPAR            reduce using rule 24 (more_pars -> .)

    more_pars                      shift and go to state 132

state 117

    (13) func -> FUNC func_type ID procedure_name LPAR pars RPAR func_block more_func .

    MAIN            reduce using rule 13 (func -> FUNC func_type ID procedure_name LPAR pars RPAR func_block more_func .)


state 118

    (25) func_block -> LBRACKET more_vars . more_statements RETURN var_cte SEMICOLON RBRACKET
    (29) more_statements -> . statement
    (30) more_statements -> .
    (31) statement -> . statement_comp more_statements
    (32) statement_comp -> . assignation
    (33) statement_comp -> . condition
    (34) statement_comp -> . cycle
    (35) statement_comp -> . read
    (36) statement_comp -> . write
    (37) statement_comp -> . function
    (38) assignation -> . ID EQUALS expression SEMICOLON
    (39) condition -> . IF LPAR expression RPAR block condition_comp
    (42) cycle -> . WHILE LPAR expression RPAR block
    (43) read -> . READ LPAR var_cte RPAR SEMICOLON
    (44) write -> . WRITE LPAR var_comp RPAR SEMICOLON
    (47) function -> . ID LPAR func_params RPAR SEMICOLON

    RETURN          reduce using rule 30 (more_statements -> .)
    ID              shift and go to state 42
    IF              shift and go to state 44
    WHILE           shift and go to state 33
    READ            shift and go to state 32
    WRITE           shift and go to state 41

    function                       shift and go to state 39
    assignation                    shift and go to state 45
    read                           shift and go to state 40
    write                          shift and go to state 36
    statement                      shift and go to state 37
    statement_comp                 shift and go to state 34
    cycle                          shift and go to state 38
    condition                      shift and go to state 43
    more_statements                shift and go to state 134

state 119

    (43) read -> READ LPAR var_cte RPAR SEMICOLON .

    ID              reduce using rule 43 (read -> READ LPAR var_cte RPAR SEMICOLON .)
    IF              reduce using rule 43 (read -> READ LPAR var_cte RPAR SEMICOLON .)
    WHILE           reduce using rule 43 (read -> READ LPAR var_cte RPAR SEMICOLON .)
    READ            reduce using rule 43 (read -> READ LPAR var_cte RPAR SEMICOLON .)
    WRITE           reduce using rule 43 (read -> READ LPAR var_cte RPAR SEMICOLON .)
    RBRACKET        reduce using rule 43 (read -> READ LPAR var_cte RPAR SEMICOLON .)
    RETURN          reduce using rule 43 (read -> READ LPAR var_cte RPAR SEMICOLON .)


state 120

    (89) function_call -> ID LPAR func_params . RPAR

    RPAR            shift and go to state 135


state 121

    (76) factor -> LPAR exp RPAR .

    MULTIPLICATION  reduce using rule 76 (factor -> LPAR exp RPAR .)
    DIVISION        reduce using rule 76 (factor -> LPAR exp RPAR .)
    PLUS            reduce using rule 76 (factor -> LPAR exp RPAR .)
    MINUS           reduce using rule 76 (factor -> LPAR exp RPAR .)
    GREATER         reduce using rule 76 (factor -> LPAR exp RPAR .)
    FEWER           reduce using rule 76 (factor -> LPAR exp RPAR .)
    GREATEROREQUAL  reduce using rule 76 (factor -> LPAR exp RPAR .)
    FEWEROREQUAL    reduce using rule 76 (factor -> LPAR exp RPAR .)
    DIFFERENT       reduce using rule 76 (factor -> LPAR exp RPAR .)
    EQUALEQUALS     reduce using rule 76 (factor -> LPAR exp RPAR .)
    AND             reduce using rule 76 (factor -> LPAR exp RPAR .)
    OR              reduce using rule 76 (factor -> LPAR exp RPAR .)
    RPAR            reduce using rule 76 (factor -> LPAR exp RPAR .)
    SEMICOLON       reduce using rule 76 (factor -> LPAR exp RPAR .)


state 122

    (72) more_factor -> multiplier term .

    PLUS            reduce using rule 72 (more_factor -> multiplier term .)
    MINUS           reduce using rule 72 (more_factor -> multiplier term .)
    GREATER         reduce using rule 72 (more_factor -> multiplier term .)
    FEWER           reduce using rule 72 (more_factor -> multiplier term .)
    GREATEROREQUAL  reduce using rule 72 (more_factor -> multiplier term .)
    FEWEROREQUAL    reduce using rule 72 (more_factor -> multiplier term .)
    DIFFERENT       reduce using rule 72 (more_factor -> multiplier term .)
    EQUALEQUALS     reduce using rule 72 (more_factor -> multiplier term .)
    AND             reduce using rule 72 (more_factor -> multiplier term .)
    OR              reduce using rule 72 (more_factor -> multiplier term .)
    RPAR            reduce using rule 72 (more_factor -> multiplier term .)
    SEMICOLON       reduce using rule 72 (more_factor -> multiplier term .)


state 123

    (53) expression_comp -> andor comp . expression_comp
    (53) expression_comp -> . andor comp expression_comp
    (54) expression_comp -> .
    (55) andor -> . AND
    (56) andor -> . OR

    RPAR            reduce using rule 54 (expression_comp -> .)
    SEMICOLON       reduce using rule 54 (expression_comp -> .)
    AND             shift and go to state 92
    OR              shift and go to state 95

    expression_comp                shift and go to state 136
    andor                          shift and go to state 94

state 124

    (67) more_term -> operator exp .

    GREATER         reduce using rule 67 (more_term -> operator exp .)
    FEWER           reduce using rule 67 (more_term -> operator exp .)
    GREATEROREQUAL  reduce using rule 67 (more_term -> operator exp .)
    FEWEROREQUAL    reduce using rule 67 (more_term -> operator exp .)
    DIFFERENT       reduce using rule 67 (more_term -> operator exp .)
    EQUALEQUALS     reduce using rule 67 (more_term -> operator exp .)
    AND             reduce using rule 67 (more_term -> operator exp .)
    OR              reduce using rule 67 (more_term -> operator exp .)
    RPAR            reduce using rule 67 (more_term -> operator exp .)
    SEMICOLON       reduce using rule 67 (more_term -> operator exp .)


state 125

    (58) exp_comp -> comparator exp .

    AND             reduce using rule 58 (exp_comp -> comparator exp .)
    OR              reduce using rule 58 (exp_comp -> comparator exp .)
    RPAR            reduce using rule 58 (exp_comp -> comparator exp .)
    SEMICOLON       reduce using rule 58 (exp_comp -> comparator exp .)


state 126

    (86) block -> LBRACKET . more_statements RBRACKET
    (29) more_statements -> . statement
    (30) more_statements -> .
    (31) statement -> . statement_comp more_statements
    (32) statement_comp -> . assignation
    (33) statement_comp -> . condition
    (34) statement_comp -> . cycle
    (35) statement_comp -> . read
    (36) statement_comp -> . write
    (37) statement_comp -> . function
    (38) assignation -> . ID EQUALS expression SEMICOLON
    (39) condition -> . IF LPAR expression RPAR block condition_comp
    (42) cycle -> . WHILE LPAR expression RPAR block
    (43) read -> . READ LPAR var_cte RPAR SEMICOLON
    (44) write -> . WRITE LPAR var_comp RPAR SEMICOLON
    (47) function -> . ID LPAR func_params RPAR SEMICOLON

    RBRACKET        reduce using rule 30 (more_statements -> .)
    ID              shift and go to state 42
    IF              shift and go to state 44
    WHILE           shift and go to state 33
    READ            shift and go to state 32
    WRITE           shift and go to state 41

    function                       shift and go to state 39
    assignation                    shift and go to state 45
    read                           shift and go to state 40
    write                          shift and go to state 36
    statement                      shift and go to state 37
    statement_comp                 shift and go to state 34
    more_statements                shift and go to state 137
    condition                      shift and go to state 43
    cycle                          shift and go to state 38

state 127

    (42) cycle -> WHILE LPAR expression RPAR block .

    ID              reduce using rule 42 (cycle -> WHILE LPAR expression RPAR block .)
    IF              reduce using rule 42 (cycle -> WHILE LPAR expression RPAR block .)
    WHILE           reduce using rule 42 (cycle -> WHILE LPAR expression RPAR block .)
    READ            reduce using rule 42 (cycle -> WHILE LPAR expression RPAR block .)
    WRITE           reduce using rule 42 (cycle -> WHILE LPAR expression RPAR block .)
    RBRACKET        reduce using rule 42 (cycle -> WHILE LPAR expression RPAR block .)
    RETURN          reduce using rule 42 (cycle -> WHILE LPAR expression RPAR block .)


state 128

    (44) write -> WRITE LPAR var_comp RPAR SEMICOLON .

    ID              reduce using rule 44 (write -> WRITE LPAR var_comp RPAR SEMICOLON .)
    IF              reduce using rule 44 (write -> WRITE LPAR var_comp RPAR SEMICOLON .)
    WHILE           reduce using rule 44 (write -> WRITE LPAR var_comp RPAR SEMICOLON .)
    READ            reduce using rule 44 (write -> WRITE LPAR var_comp RPAR SEMICOLON .)
    WRITE           reduce using rule 44 (write -> WRITE LPAR var_comp RPAR SEMICOLON .)
    RBRACKET        reduce using rule 44 (write -> WRITE LPAR var_comp RPAR SEMICOLON .)
    RETURN          reduce using rule 44 (write -> WRITE LPAR var_comp RPAR SEMICOLON .)


state 129

    (47) function -> ID LPAR func_params RPAR SEMICOLON .

    ID              reduce using rule 47 (function -> ID LPAR func_params RPAR SEMICOLON .)
    IF              reduce using rule 47 (function -> ID LPAR func_params RPAR SEMICOLON .)
    WHILE           reduce using rule 47 (function -> ID LPAR func_params RPAR SEMICOLON .)
    READ            reduce using rule 47 (function -> ID LPAR func_params RPAR SEMICOLON .)
    WRITE           reduce using rule 47 (function -> ID LPAR func_params RPAR SEMICOLON .)
    RBRACKET        reduce using rule 47 (function -> ID LPAR func_params RPAR SEMICOLON .)
    RETURN          reduce using rule 47 (function -> ID LPAR func_params RPAR SEMICOLON .)


state 130

    (50) var_more -> COMMA var_comp . var_more
    (50) var_more -> . COMMA var_comp var_more
    (51) var_more -> .

    COMMA           shift and go to state 113
    RPAR            reduce using rule 51 (var_more -> .)

    var_more                       shift and go to state 138

state 131

    (39) condition -> IF LPAR expression RPAR block . condition_comp
    (40) condition_comp -> . ELSE block
    (41) condition_comp -> .

    ELSE            shift and go to state 140
    ID              reduce using rule 41 (condition_comp -> .)
    IF              reduce using rule 41 (condition_comp -> .)
    WHILE           reduce using rule 41 (condition_comp -> .)
    READ            reduce using rule 41 (condition_comp -> .)
    WRITE           reduce using rule 41 (condition_comp -> .)
    RBRACKET        reduce using rule 41 (condition_comp -> .)
    RETURN          reduce using rule 41 (condition_comp -> .)

    condition_comp                 shift and go to state 139

state 132

    (21) pars_comp -> var_type add_to_param_type ID to_var_table more_pars .

    RPAR            reduce using rule 21 (pars_comp -> var_type add_to_param_type ID to_var_table more_pars .)


state 133

    (23) more_pars -> COMMA . pars_comp
    (21) pars_comp -> . var_type add_to_param_type ID to_var_table more_pars
    (8) var_type -> . INT
    (9) var_type -> . DOUBLE
    (10) var_type -> . BOOL
    (11) var_type -> . INTLIST
    (12) var_type -> . DOUBLELIST

    INT             shift and go to state 3
    DOUBLE          shift and go to state 4
    BOOL            shift and go to state 6
    INTLIST         shift and go to state 7
    DOUBLELIST      shift and go to state 8

    var_type                       shift and go to state 46
    pars_comp                      shift and go to state 141

state 134

    (25) func_block -> LBRACKET more_vars more_statements . RETURN var_cte SEMICOLON RBRACKET

    RETURN          shift and go to state 142


state 135

    (89) function_call -> ID LPAR func_params RPAR .

    MULTIPLICATION  reduce using rule 89 (function_call -> ID LPAR func_params RPAR .)
    DIVISION        reduce using rule 89 (function_call -> ID LPAR func_params RPAR .)
    PLUS            reduce using rule 89 (function_call -> ID LPAR func_params RPAR .)
    MINUS           reduce using rule 89 (function_call -> ID LPAR func_params RPAR .)
    GREATER         reduce using rule 89 (function_call -> ID LPAR func_params RPAR .)
    FEWER           reduce using rule 89 (function_call -> ID LPAR func_params RPAR .)
    GREATEROREQUAL  reduce using rule 89 (function_call -> ID LPAR func_params RPAR .)
    FEWEROREQUAL    reduce using rule 89 (function_call -> ID LPAR func_params RPAR .)
    DIFFERENT       reduce using rule 89 (function_call -> ID LPAR func_params RPAR .)
    EQUALEQUALS     reduce using rule 89 (function_call -> ID LPAR func_params RPAR .)
    AND             reduce using rule 89 (function_call -> ID LPAR func_params RPAR .)
    OR              reduce using rule 89 (function_call -> ID LPAR func_params RPAR .)
    RPAR            reduce using rule 89 (function_call -> ID LPAR func_params RPAR .)
    SEMICOLON       reduce using rule 89 (function_call -> ID LPAR func_params RPAR .)
    COMMA           reduce using rule 89 (function_call -> ID LPAR func_params RPAR .)


state 136

    (53) expression_comp -> andor comp expression_comp .

    RPAR            reduce using rule 53 (expression_comp -> andor comp expression_comp .)
    SEMICOLON       reduce using rule 53 (expression_comp -> andor comp expression_comp .)


state 137

    (86) block -> LBRACKET more_statements . RBRACKET

    RBRACKET        shift and go to state 143


state 138

    (50) var_more -> COMMA var_comp var_more .

    RPAR            reduce using rule 50 (var_more -> COMMA var_comp var_more .)


state 139

    (39) condition -> IF LPAR expression RPAR block condition_comp .

    ID              reduce using rule 39 (condition -> IF LPAR expression RPAR block condition_comp .)
    IF              reduce using rule 39 (condition -> IF LPAR expression RPAR block condition_comp .)
    WHILE           reduce using rule 39 (condition -> IF LPAR expression RPAR block condition_comp .)
    READ            reduce using rule 39 (condition -> IF LPAR expression RPAR block condition_comp .)
    WRITE           reduce using rule 39 (condition -> IF LPAR expression RPAR block condition_comp .)
    RBRACKET        reduce using rule 39 (condition -> IF LPAR expression RPAR block condition_comp .)
    RETURN          reduce using rule 39 (condition -> IF LPAR expression RPAR block condition_comp .)


state 140

    (40) condition_comp -> ELSE . block
    (86) block -> . LBRACKET more_statements RBRACKET

    LBRACKET        shift and go to state 126

    block                          shift and go to state 144

state 141

    (23) more_pars -> COMMA pars_comp .

    RPAR            reduce using rule 23 (more_pars -> COMMA pars_comp .)


state 142

    (25) func_block -> LBRACKET more_vars more_statements RETURN . var_cte SEMICOLON RBRACKET
    (79) var_cte -> . CTEINT
    (80) var_cte -> . CTEDOUBLE
    (81) var_cte -> . ID
    (82) var_cte -> . cte_bool
    (83) var_cte -> . function_call
    (84) cte_bool -> . TRUE
    (85) cte_bool -> . FALSE
    (89) function_call -> . ID LPAR func_params RPAR

    CTEINT          shift and go to state 61
    CTEDOUBLE       shift and go to state 59
    ID              shift and go to state 66
    TRUE            shift and go to state 65
    FALSE           shift and go to state 60

    cte_bool                       shift and go to state 62
    function_call                  shift and go to state 63
    var_cte                        shift and go to state 145

state 143

    (86) block -> LBRACKET more_statements RBRACKET .

    ID              reduce using rule 86 (block -> LBRACKET more_statements RBRACKET .)
    IF              reduce using rule 86 (block -> LBRACKET more_statements RBRACKET .)
    WHILE           reduce using rule 86 (block -> LBRACKET more_statements RBRACKET .)
    READ            reduce using rule 86 (block -> LBRACKET more_statements RBRACKET .)
    WRITE           reduce using rule 86 (block -> LBRACKET more_statements RBRACKET .)
    RBRACKET        reduce using rule 86 (block -> LBRACKET more_statements RBRACKET .)
    RETURN          reduce using rule 86 (block -> LBRACKET more_statements RBRACKET .)
    ELSE            reduce using rule 86 (block -> LBRACKET more_statements RBRACKET .)


state 144

    (40) condition_comp -> ELSE block .

    ID              reduce using rule 40 (condition_comp -> ELSE block .)
    IF              reduce using rule 40 (condition_comp -> ELSE block .)
    WHILE           reduce using rule 40 (condition_comp -> ELSE block .)
    READ            reduce using rule 40 (condition_comp -> ELSE block .)
    WRITE           reduce using rule 40 (condition_comp -> ELSE block .)
    RBRACKET        reduce using rule 40 (condition_comp -> ELSE block .)
    RETURN          reduce using rule 40 (condition_comp -> ELSE block .)


state 145

    (25) func_block -> LBRACKET more_vars more_statements RETURN var_cte . SEMICOLON RBRACKET

    SEMICOLON       shift and go to state 146


state 146

    (25) func_block -> LBRACKET more_vars more_statements RETURN var_cte SEMICOLON . RBRACKET

    RBRACKET        shift and go to state 147


state 147

    (25) func_block -> LBRACKET more_vars more_statements RETURN var_cte SEMICOLON RBRACKET .

    FUNC            reduce using rule 25 (func_block -> LBRACKET more_vars more_statements RETURN var_cte SEMICOLON RBRACKET .)
    MAIN            reduce using rule 25 (func_block -> LBRACKET more_vars more_statements RETURN var_cte SEMICOLON RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 0 resolved using rule (vars -> <empty>)
WARNING: rejected rule (more_vars -> <empty>) in state 0
WARNING: reduce/reduce conflict in state 27 resolved using rule (vars -> <empty>)
WARNING: rejected rule (more_vars -> <empty>) in state 27
WARNING: reduce/reduce conflict in state 75 resolved using rule (var_comp -> function_call)
WARNING: rejected rule (var_cte -> function_call) in state 75
WARNING: reduce/reduce conflict in state 84 resolved using rule (vars -> <empty>)
WARNING: rejected rule (more_vars -> <empty>) in state 84
WARNING: Rule (more_vars -> <empty>) is never reduced
